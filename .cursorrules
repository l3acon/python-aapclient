# AAP CLI Development Context

## Project Overview

**python-aapclient** is a command-line client for Ansible Automation Platform (AAP) that provides a unified interface for managing AAP resources. It's modeled after python-openstackclient and follows similar patterns for command structure, organization, and output formatting.

### Core Architecture

- **Multi-API Support**: Integrates with AAP's Gateway API (identity management) and Controller API (automation operations)
- **Cliff Framework**: Built on OpenStack's Cliff framework for consistent CLI patterns
- **Resource Management**: CRUD operations for organizations, users, teams, projects, job templates, inventories, credentials, and jobs
- **Dual API Strategy**: Uses Gateway API for identity resources (AAP 2.5+) and Controller API for automation resources

### Key Directories

```
python-aapclient/
├── aapclient/
│   ├── common/           # Shared utilities and base classes
│   ├── controller/v2/    # Controller API commands
│   ├── gateway/v1/       # Gateway API commands
│   ├── eda/             # Event-Driven Ansible integration
│   └── galaxy/          # Galaxy content management
```

## Recent Major Improvements

### 1. Error Handling Standardization (Completed)

**Problem**: Inconsistent error messages between numeric IDs and named resources.
- Named resources: `Organization 'foo' not found`
- Numeric IDs: Raw API errors with full URLs

**Solution**: Implemented consistent error handling across all show commands:
- Added try-catch blocks for numeric ID lookups
- Convert API errors to user-friendly messages
- Standardized error format: `Resource 'identifier' not found`

**Files Modified**: All show command implementations in controller/v2/ and gateway/v1/

### 2. Numeric Name vs ID Resolution (Completed)

**Problem**: Resources with numeric names (e.g., organization named "420") couldn't be accessed when the CLI assumed numeric strings were always IDs.

**Solution**: Implemented mutually exclusive flag pattern:
- `--id <number>` for explicit ID lookup
- `--name <string>` for explicit name lookup
- Positional argument defaults to name lookup
- Cross-validation when both ID and positional name provided

**Pattern Applied To**:
- ShowProject, ShowJobTemplate, ShowInventory, ShowCredential
- ShowOrganization, ShowUser, ShowTeam
- DeleteInventory, DeleteCredential, DeleteOrganization, DeleteUser, DeleteTeam
- SetOrganization, SetTeam

### 3. Visual Name Formatting (Completed)

**Problem**: Numeric names displayed without quotes could be confused with IDs.

**Solution**:
- Added `format_name()` utility function in `utils.py`
- Automatically wraps numeric names in double quotes
- Applied to all tabular output via `get_dict_properties()`
- Examples: `"420"` vs `420` (ID), `"123"` vs `123` (ID)

### 4. Documentation Modernization (Completed)

**Change**: Converted README.rst to README.md with proper Markdown formatting
**Updated**: pyproject.toml and setup.cfg to reference new README.md

### 5. Enhanced Ping Command (Completed)

**Problem**: Original ping command only checked Controller API endpoint
**Solution**: Enhanced ping command to check both Controller and Gateway API endpoints:
- Added `ping()` method to gateway client
- Modified ping command to query both APIs simultaneously
- Shows overall status plus detailed info for each API
- Handles partial failures gracefully (e.g., one API up, other down)
- Clear visual separation between API results
- Uses Gateway API's `pong` field for accurate server time display
- Correctly extracts Controller API's `active_node` from top level
- Displays Gateway database and proxy connection status
- Only displays fields when data is available (conditional field display)
- Added `--detail` flag to extend standard output with detailed Controller infrastructure info
- Detail mode preserves dual API view and adds instances, instance groups, HA status, and capacity

**Files Modified**: `aapclient/gateway/client.py`, `aapclient/common/ping.py`

### 6. GUI-Aligned List Commands (Completed)

**Problem**: CLI list commands didn't match AAP GUI column layouts, causing inconsistent user experience between interfaces.

**Solution**: Updated list commands to mirror GUI exactly:
- **Duration Format**: Modified `format_duration()` in `utils.py` to use "1h 2m 5s" format instead of "01:02:05", omitting zero values
- **Team List**: Removed description column from both regular and long formats
- **Template List**: Changed to GUI columns (id, name, type, labels, organization, last run):
  - Added `job_type` for Type column
  - Extracted labels from `job_tags` field
  - Added organization name from `summary_fields.organization.name`
  - Formatted `last_job_run` timestamp with `format_datetime()`
- **User List**: Changed to GUI columns (id, name, user type, email, first name, last name, last login):
  - Added dynamic User Type based on permissions (System Administrator, System Auditor, Normal)
  - Formatted `last_login` timestamp with `format_datetime()`
  - Renamed username column to Name for GUI consistency

**Files Modified**: `aapclient/common/utils.py`, `aapclient/gateway/v1/team.py`, `aapclient/controller/v2/job_template.py`, `aapclient/gateway/v1/user.py`

### 7. List Command Pagination Consistency (Completed)

**Problem**: Inconsistent default limits across list commands and incomplete template access:
- `aap job list` defaulted to 20 items
- `aap template list` defaulted to 25 items (AAP API default)
- Template list showed only 25 of 39 available templates, missing items visible in GUI

**Solution**: Implemented consistent pagination with `--limit` parameter:
- **Added `--limit` parameter** to template list command following job list pattern
- **Standardized default limit** to 20 across all list commands for consistency
- **Explicit page_size control**: Always sets `page_size=20` when no limit specified
- **Complete access**: Users can now see all resources with `--limit <high_number>`

**Implementation Pattern**:
```python
parser.add_argument('--limit', type=int, help='Limit the number of results (default: 20)')

# In take_action:
if parsed_args.limit:
    params['page_size'] = parsed_args.limit
else:
    params['page_size'] = 20  # Consistent default
```

**Files Modified**: `aapclient/controller/v2/job_template.py`

### 8. Resource List Command (Completed)

**Problem**: Users needed a quick overview of all resource types and their counts in their AAP environment without running multiple individual list commands.

**Solution**: Created `aap resource list` command that queries both Controller and Gateway APIs to display total counts for all implemented resource types:
- **Resource Types** (in order): templates, projects, inventories, credentials, organizations, teams, users
- **Excludes jobs** (as requested, since they're transient execution records)
- **Efficient querying**: Uses `page_size=1` to minimize data transfer while getting accurate count
- **Error handling**: Gracefully handles API failures and displays "Error" for affected resources
- **Dual API support**: Automatically uses Controller API for automation resources, Gateway API for identity resources

**Files Added:**
- `aapclient/common/resource_list.py` - Resource list command implementation
- Updated `pyproject.toml` entry points to register `resource_list = "aapclient.common.resource_list:ResourceList"`

**Technical Details:**
- Command returns total counts from API `count` field, not just paginated results
- Uses both `controller_client` and `gateway_client` as appropriate for each resource type
- Follows established patterns with Lister base class and consistent column formatting
- Command name follows established pattern consistency with other resource commands

### 10. Host CRUD Commands (Completed)

**Problem**: Users needed comprehensive host management capabilities through the CLI to match the GUI functionality for managing hosts within inventories.

**Solution**: Implemented complete CRUD operations for hosts in the Controller API:

**Commands Added:**
- `aap host list [--long] [--inventory <id>] [--limit <number>]` - List hosts with filtering and pagination
- `aap host show <host>` - Display detailed host information (by name or ID)
- `aap host create <name> --inventory <id> [--description <text>] [--variables <json>] [--enabled/--disabled]` - Create new hosts
- `aap host set <host> [--name <name>] [--description <text>] [--variables <json>] [--enabled/--disabled]` - Update host properties
- `aap host delete <host>...` - Delete hosts (supports multiple hosts and name/ID lookup)

**Key Features:**
- **GUI-aligned columns**: ID, Name, Description, Inventory, Enabled, Variables (with long format showing Created, Modified, Last Job)
- **Filtering capabilities**: `--inventory` by ID, `--limit` for pagination (default: 20 items)
- **Dual lookup support**: All commands support both name and ID lookup for flexibility
- **Variables truncation**: Long variable content is truncated in list view for readability
- **Enabled/disabled management**: Intuitive `--enabled`/`--disabled` flags for host state management
- **Bulk operations**: Delete command supports multiple hosts in a single operation
- **Validation**: Name/ID cross-validation prevents accidental operations on wrong resources

**Files Added:**
- `aapclient/controller/v2/host.py` - Complete host CRUD command implementations
- Updated `aapclient/controller/client.py` - Added host API methods (list_hosts, get_host, create_host, update_host, delete_host)
- Updated `pyproject.toml` - Added host command entry points

**API Integration:**
- Uses Controller API `/hosts/` endpoint with standard CRUD operations
- Supports pagination with `page_size` parameter and ID-based sorting
- Handles inventory relationships and name resolution via summary_fields
- Graceful error handling for invalid hosts, permissions, and API failures

**Testing Verified:**
- ✅ List hosts with various filters and formats
- ✅ Show hosts by both name and ID
- ✅ Create hosts with required inventory parameter
- ✅ Update host properties (description, enabled/disabled state)
- ✅ Delete hosts with confirmation messages
- ✅ Error handling for invalid inputs and missing resources

**Technical Details:**
- Follows established CRUD patterns from projects, inventories, and credentials
- Uses `Lister`, `ShowOne`, and `Command` base classes appropriately
- Implements consistent ID-based sorting (order_by=id) and 20-item default pagination
- Variables field supports JSON format with proper error handling
- Name resolution leverages summary_fields for related object names (inventory, created_by, modified_by)

### 11. List Command Pagination Consistency (Completed)

**Problem**: Inconsistent default limits across list commands and incomplete template access:
- `aap job list` defaulted to 20 items
- `aap template list` defaulted to 25 items (AAP API default)
- Template list showed only 25 of 39 available templates, missing items visible in GUI

**Solution**: Implemented consistent pagination with `--limit` parameter:
- **Added `--limit` parameter** to template list command following job list pattern
- **Standardized default limit** to 20 across all list commands for consistency
- **Explicit page_size control**: Always sets `page_size=20` when no limit specified
- **Complete access**: Users can now see all resources with `--limit <high_number>`

**Implementation Pattern**:
```python
parser.add_argument('--limit', type=int, help='Limit the number of results (default: 20)')

# In take_action:
if parsed_args.limit:
    params['page_size'] = parsed_args.limit
else:
    params['page_size'] = 20  # Consistent default
```

**Files Modified**: `aapclient/controller/v2/job_template.py`

## Command Patterns & Conventions

### Standard CRUD Operations

All resources follow consistent command patterns:
```bash
aap <resource> list [--long] [--limit <number>] [--filters...]
aap <resource> show <identifier> [--id <id>] [--name <name>]
aap <resource> create <name> [--options...]
aap <resource> set <identifier> [--id <id>] [--name <name>] [--updates...]
aap <resource> delete <identifier> [--id <id>] [--name <name>]
```

### List Command Pagination

**All list commands should support consistent pagination**:
- **Default limit**: 20 results per command
- **`--limit` parameter**: Allow users to override default
- **Implementation**: Always set explicit `page_size` to avoid API-specific defaults

**Job List Example** (has --limit):
```bash
aap job list                 # Returns 20 jobs (default)
aap job list --limit 50      # Returns up to 50 jobs
```

**Template List Example** (has --limit):
```bash
aap template list            # Returns 20 templates (default)
aap template list --limit 50 # Returns up to 50 templates
```

**Other List Commands** (should be updated to include --limit):
- `aap project list`, `aap inventory list`, `aap credential list`
- `aap organization list`, `aap user list`, `aap team list`

### List Command Sorting Requirements

**All list commands MUST sort by ID by default** for consistency across the CLI interface.

**Controller API Implementation**:
```python
params['order_by'] = 'id'
data = client.list_resource(**params)
```

**Gateway API Implementation**:
```python
params['order_by'] = 'id'
data = client.list_resource(**params)
# or direct parameter: data = client.list_resource(order_by='id')
```

This ensures consistent, predictable ordering across all list commands (job, template, credential, organization, user, team, inventory, project).

### Special Commands

```bash
# Health monitoring
aap ping                    # Check both Gateway and Controller APIs
aap ping --detail           # Extended view with detailed Controller infrastructure
aap ping --timeout <sec>    # Custom timeout for connectivity checks
```

### Mutually Exclusive Flag Pattern

For commands that accept resource identifiers:
```python
# Create mutually exclusive group for --id and --name
group = parser.add_mutually_exclusive_group()
group.add_argument('--id', metavar='<id>', type=int, help='Resource ID')
group.add_argument('--name', metavar='<name>', help='Resource name')

# Validation logic:
if parsed_args.id and parsed_args.resource:
    # Cross-validate ID and name refer to same resource
elif parsed_args.id:
    # Direct ID lookup
else:
    # Name lookup (default behavior)
```

### Error Handling Patterns

```python
from aapclient.common.utils import CommandError

try:
    resource = client.get_resource(resource_id)
except (ControllerClientError, GatewayClientError):
    raise CommandError(f"Resource with ID {resource_id} not found")
```

### Output Formatting

```python
from aapclient.common.utils import get_dict_properties, format_name

# For success messages with names
self.app.stdout.write(f"Resource {format_name(resource_name)} deleted\n")

# For tabular output (automatic name formatting)
return (columns, get_dict_properties(data, columns))
```

## Key Utility Functions

### `aapclient/common/utils.py`

- **`format_name(name)`**: Wraps numeric names in quotes for visual distinction
- **`get_dict_properties(data, columns)`**: Extracts and formats data for tabular display
- **`find_resource(resources, name_or_id)`**: Generic resource lookup with error handling
- **`format_datetime(dt_string)`**: Consistent datetime formatting
- **`format_duration(start_time, end_time)`**: Formats time spans as "1h 2m 5s" (omits zero values)
- **`CommandError`**: Standard exception for CLI errors

## Testing Approach

### Manual Testing Patterns

Test the three main scenarios for any resource:
```bash
# 1. Regular name lookup
aap resource show "MyResource"

# 2. Numeric name lookup
aap resource show --name "123"

# 3. ID lookup
aap resource show --id 123

# 4. Cross-validation
aap resource show --id 123 "MyResource"  # Should validate they match
```

### Error Cases to Verify

- Resource not found (both ID and name)
- Ambiguous references (if fallback logic exists)
- Mismatched ID and name in cross-validation
- Invalid arguments (mutually exclusive flags)

## Development Guidelines

### Adding New Commands

1. **Follow established patterns**: Use existing commands as templates
2. **Implement mutually exclusive flags**: For any command accepting resource identifiers
3. **Use utility functions**: `format_name()`, `get_dict_properties()`, `CommandError`
4. **Cross-validate**: When both ID and name provided, ensure they match
5. **Consistent error messages**: Use standardized format for not found errors

### API Client Usage

- **Gateway API**: For identity resources (organizations, users, teams)
- **Controller API**: For automation resources (projects, templates, inventories)
- **Error handling**: Always wrap API calls in try-catch with user-friendly errors

### Code Organization

- **Keep commands focused**: Single responsibility per command class
- **Shared logic in utils**: Don't duplicate validation or formatting logic
- **Consistent imports**: Use established import patterns
- **Documentation**: Include helpful docstrings and argument descriptions

## Current State & Considerations

### Completed Improvements

✅ Consistent error handling across all APIs
✅ Safe numeric name vs ID resolution
✅ Visual formatting with quoted numeric names
✅ Mutually exclusive flag patterns
✅ Comprehensive command coverage
✅ Modern Markdown documentation
✅ Enhanced ping command with dual API support
✅ GUI-aligned list commands (team, template, user) with matching column layouts
✅ Improved duration formatting ("1h 2m 5s" vs "01:02:05")
✅ List command pagination consistency
✅ Resource list command
✅ Host CRUD commands

### Architecture Strengths

- Clean separation between Gateway and Controller APIs
- Consistent command patterns following OpenStack client model
- Robust error handling and user feedback
- Flexible resource identification (ID vs name)
- Visual clarity for numeric names vs IDs

### Future Considerations

- **Testing**: Automated test suite for command patterns
- **Documentation**: Auto-generated command reference from help text

### Development Workflow

1. **Environment Setup**: Use `.venv` with `pip install -e .`
2. **Configuration**: Set up `.env` file with AAP credentials
3. **Testing**: Manual testing with real AAP instance
4. **Patterns**: Follow established command and error handling patterns
5. **Validation**: Test all three resource identification methods

This codebase represents a mature, well-structured CLI tool with consistent patterns and robust error handling. New contributors should focus on following established conventions and leveraging the comprehensive utility functions already in place.
